% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shinyReport.R
\name{shinyReport}
\alias{shinyReport}
\title{shinyReport}
\usage{
shinyReport(input, output, session, libraryPath, filePath, data,
  reportType)
}
\arguments{
\item{input}{top level interactive user input in Shiny app}

\item{output}{shiny list object for session output}

\item{session}{active shiny session}

\item{libraryPath}{character string path to BG.library code}

\item{filePath}{character path to csv import file}

\item{data}{data.frame with BG values in BG.Reading..mg.dL.}

\item{reportType}{character string indicating the type of report to be generated}
}
\description{
Shiny server function that outputs BG_report and historical sequence
plto reports as html documents
}
\examples{
libraryPath<-"F:/BG.library_github/BG.library/"
filePath<-"F:/BG.library_github/exampleData.csv"
dataImport.list<-dataImport(filePath,libraryPath)
data<-dataImport.list$allData
#file path to plotList
plotListFile<-paste0(libraryPath,"/data/plotList")
#load plotList
load(file = plotListFile)

shinyApp(ui=shinyUI(
 fluidPage(
   titlePanel(
     h1("Rshiny Interactive BG Plots")),
   sidebarLayout(
     sidebarPanel(width=6,
                  #top level user input
                  selectInput("shPlotType","Select Plot Type",
                              choices = c("scatter","bar","box","heatmap","Saved Plot"),
                              selected = 'scatter'),  
                  uiOutput("dateTimeUI"),
                  uiOutput("outputUI"),
                  uiOutput("historyUI")
     ),#end sidebar
     mainPanel(width = 6,
               verbatimTextOutput("txtOut")
     )#end main panel
   )#end sidebar layout
 )#end fluid page
),#end shiny ui

server=shinyServer(function(input, output,session) {
 #render UIs
 observe({
   if (input$shPlotType=="scatter"){
     output$outputUI<-renderUI({
       scatterUI()
     })
   }else if (input$shPlotType=="box" | input$shPlotType=="bar"){
     output$outputUI<-renderUI({
       boxBarUI(data)
     })
   }else if (input$shPlotType=="heatmap"){
     output$outputUI<-renderUI({
       heatmapUI(data)
     })
   }else{#saved plot
     output$outputUI<-renderUI({
       savedUI(plotList)
     })
   }
 })
 observe({
   output$historyUI<-renderUI({
     historyUI()
   })
   output$dateTimeUI<-renderUI({
     dateTimeUI()
   })
   
   output$txtOut <- renderPrint({
     setupShinyParams(input, output, session,
                      libraryPath, filePath,
                      data)
   })  })
})#end shiny server
)#end shiny app
}

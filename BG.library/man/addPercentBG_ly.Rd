% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addPercentBG_ly.R
\name{addPercentBG_ly}
\alias{addPercentBG_ly}
\title{addPercentBG_ly}
\usage{
addPercentBG_ly(p, data, addPercentBG = c("low", "good", "high",
  "very high"), addPercentType = "BG.Reading..mg.dL.",
  fromChange = TRUE, numberDays = NA, startDate = NA, endDate = NA,
  startTime = "00:00", endTime = "23:00", timeStep = "hour",
  period = 1, removeDates = NA, filterCond = "",
  outputType = "plot_ly", libraryPath)
}
\arguments{
\item{p}{current plot_ly plot}

\item{data}{data.frame with BG values in BG.Reading..mg.dL. and SG values in Sensor.Glucose..mg.dL.}

\item{addPercentBG}{character vector of groups to include (c("low","good","high","very high"))}

\item{addPercentType}{character string of column name with values to group (i.e. "BG.Reading..mg.dL.")}

\item{fromChange}{TRUE/FALSE indicates whether data should be subset with the ealiest date
as the most recent pump settings change.  This setting overrides all other date subsetting
parameters, and must be set to \code{FALSE} to apply other parameter settings (i.e. \code{numberDays},
\code{startDate}, and \code{endDate})}

\item{numberDays}{numeric value indicating number of days of data to include.  This parameter will
override \code{startDate} and \code{endDate} unless it is set to NA.  The \code{fromChange} parameter will override
all other parameters that subset the data by date.}

\item{startDate}{Earliest date included in data.  This setting will only be applied
if \code{numberDays = NA} and \code{fromChange = FALSE}}

\item{endDate}{Latest date included in data.  This setting will only be applied
if \code{numberDays = NA} and \code{fromChange = FALSE}}

\item{startTime}{character string of beginning time for plot (typically startTime = "00:00)}

\item{endTime}{character string of ending time for plot (typically endTime = "23:00)}

\item{timeStep}{character string indicating the time step to aggregate data, possible values
include c("hour","day")}

\item{period}{numeric value indicating number of \code{timeSteps} to aggregate into single step
for example : \code{timeStep = 'hour'}  and \code{period = 3} outputs plots with tick marks every 3 hours.}

\item{removeDates}{character vector of dates in format %Y-%m-%d to remove from data}

\item{filterCond}{character string of R syntax to be applied to filter the data,
example \code{data[data$BG.Reading..mg.dL.>150 & !is.na(data$BG.Reading..mg.dL.),]}}

\item{outputType}{character string indicating type of output, options are "plot_ly", or "table"}

\item{libraryPath}{character string path to BG.library code}
}
\value{
\code{p} plot_ly interactive plot with text indicating percentages in right-hand corner or
\code{percentOut} a data.frame of percentages by group if \code{outputTupe=="table"}
}
\description{
Outputs a data.frame of grouped (low < 80, 80<=good<=150, 150<high<=240, very high >240)
percentages of BG or SG data or adds percentages as text to plotly interactive plot. \cr \cr
}
\examples{
libraryPath<-"F:/BG.library_github/BG.library/"
filePath<-"F:/BG.library_github/exampleData.csv"
dataImport.list<-dataImport(filePath,libraryPath)
data<-dataImport.list$allData
data<-subsetData(data,numberDays = NA,startDate = NA,endDate = NA,filterCond = "",
               startTime = "00:00", endTime = "23:00",timeStep = "hour",period = 1, 
               fromChange = TRUE,libraryPath = libraryPath)
#output as 'plot_ly'
p<-plot_ly()
p<-addBGpoints_ly(p, data)
addPercentBG_ly(p,data,libraryPath = libraryPath)

#output as 'table'
addPercentBG_ly(p = NA,data,outputType = "table",libraryPath = libraryPath)
}
